(define s '(a + b * c + d * e * f + g + h + i * j)) ;a + bc + def + g + h + ij
(define t '(a * b + c * d + e + f * g * h * i + j)) ;ab + cd + e + fghi +j

(define (parse0 x)
  (define (iter rest sum product)
    (cond ((null? rest)
           (if (null? product)
               sum
               (append sum (list product)))
           )
          ((null? (cdr rest))
           (if (null? product)
               (append sum (list '+ (car rest)))
               (append sum (list '+ (append (cdr product) (list '* (car rest))))))
           )
          ((eq? (cadr rest) '*)
           (iter (cddr rest) sum (append product (list '* (car rest))))
           )
          ((eq? (cadr rest) '+)
           (if (null? product)
               (iter (cddr rest) (append sum (list '+ (car rest))) '())
               (iter (cddr rest) (append sum (list '+ (append (cdr product) (list '* (car rest))) )) '()))
           )
          ))
  (cdr (iter x '() '())))

(define (parse1 x)
  (define (iter rest sum product)
    (cond ((null? rest)
           (if (null? product)
               sum
               (cons (list product) sum))
;               (append sum (list product)))
           )
          ((null? (cdr rest))
           (if (null? product)
               (append sum (list '+ (car rest)))
               (append sum (list '+ (append (cdr product) (list '* (car rest))))))
           )
          ((eq? (cadr rest) '*)
           (iter (cddr rest) sum (append product (list '* (car rest))))
           )
          ((eq? (cadr rest) '+)
           (if (null? product)
               (iter (cddr rest) (append sum (list '+ (car rest))) '())
               (iter (cddr rest) (append sum (list '+ (append (cdr product) (list '* (car rest))) )) '()))
           )
          ))
  (cdr (iter x '() '())))
